@page "/register"

@using MauiApp1.DbApp.Models
@using MauiApp1.Front.Services
@using MauiApp1.Front.Services.Log
@layout SignLayout
@inject IUserRepository Repository
@inject IHashService Hasher
@inject ILoggingService Logger
@inject NavigationManager NavigationManager

<div class="container-fluid vh-100 bg-primary d-flex align-items-center justify-content-center" style="background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);">
    <div class="col-12 col-md-6 col-lg-4">
        <div class="card shadow-lg border-0 rounded-4">
            <div class="card-body p-5">
                <div class="text-center mb-4">
                    <h2 class="card-title text-primary mb-3">Регистрация</h2>
                    <p class="text-muted">Создайте свой аккаунт</p>
                </div>
                <EditForm Model="@registerModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">Имя</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-person"></i></span>
                            <InputText @bind-Value="registerModel.Name" class="form-control" placeholder="Введите ваше имя" />
                        </div>
                        <ValidationMessage For="@(() => registerModel.Name)" class="text-danger small mt-1" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Имя пользователя</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-at"></i></span>
                            <InputText @bind-Value="registerModel.Username" class="form-control" placeholder="Придумайте логин" />
                        </div>
                        <ValidationMessage For="@(() => registerModel.Username)" class="text-danger small mt-1" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Пароль</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-lock"></i></span>
                            <InputText type="password" @bind-Value="registerModel.Password" class="form-control" placeholder="Введите пароль" />
                        </div>
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-danger small mt-1" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox @bind-Value="registerModel.IsEmployee" class="form-check-input" id="employeeCheck" />
                        <label class="form-check-label" for="employeeCheck">
                            Регистрация как сотрудник
                        </label>
                    </div>

                    <div class="d-grid mb-3">
                        <button type="submit" class="btn btn-primary btn-lg">
                            Зарегистрироваться
                        </button>
                    </div>
                    <div class="text-center">
                        <span class="text-muted">Уже есть аккаунт? </span>
                        <a href="/login" class="btn btn-link p-0">Войти</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();

    private class RegisterModel
    {
        [Required(ErrorMessage = "Имя обязательно")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Имя пользователя обязательно")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Пароль обязателен")]
        [MinLength(6, ErrorMessage = "Пароль должен быть не короче 6 символов")]
        public string Password { get; set; } = string.Empty;

        public bool IsEmployee { get; set; } = false;
    }

    private async Task HandleLogin()
    {
        var user = await Repository.GetByUsernameAsync(registerModel.Username);

        if (user != null)
        {
            // TODO: Обработка существующего пользователя
            return;
        }

        try
        {
            var userRole = registerModel.IsEmployee ? "Employee" : "Customer";
            await Repository.AddAsync(UserEntity.Create(
                registerModel.Name,
                registerModel.Username,
                Hasher.HashPassword(registerModel.Password),
                userRole
            ));

            Logger.LogInfo($"Пользователь {registerModel.Username} успешно зарегистрировался как {userRole.ToLower()}");
            NavigationManager.NavigateTo("login");
        }
        catch (Exception ex)
        {
            // TODO: Обработка ошибок регистрации
            Logger.LogError($"Ошибка регистрации: {ex.Message}");
        }
    }
}