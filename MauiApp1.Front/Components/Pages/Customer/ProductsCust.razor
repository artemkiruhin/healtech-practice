@page "/prodcust"
@using AutoMapper
@using MauiApp1.DbApp.Models
@using MauiApp1.DbApp.Models.Dtos
@using MauiApp1.Front.Services.Entity
@using MauiApp1.Front.Services.Jwt
@layout CustomerLayout
@inject IMapper Mapper
@inject ProductService ProductService
@inject IOrderRepository OrderRepository
@inject IJwtTokenService JwtTokenService


<div class="container mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="card-title mb-0">Наши Продукты</h3>
            <div class="input-group w-50">
                <input type="text"
                       @bind="SearchTerm"
                       @bind:event="oninput"
                       placeholder="Поиск товаров..."
                       class="form-control" />
            </div>
        </div>

        @if (isLoading)
        {
            <div class="text-center my-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Загрузка...</span>
                </div>
            </div>
        }
        else if (filteredProducts.Any())
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 p-3">
                @foreach (var product in filteredProducts)
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@product.Name</h5>
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <span class="h4 text-primary mb-0">
                                        @product.Price.ToString("C")
                                    </span>
                                    <small class="text-muted">Склад: @product.StockQuantity</small>
                                </div>
                                <div class="d-flex gap-2">
                                    <button @onclick="() => CreateOrder(product)"
                                            class="btn btn-primary flex-grow-1"
                                            disabled="@(product.StockQuantity <= 0)">
                                        @(product.StockQuantity > 0 ? "Заказать" : "Нет в наличии")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info text-center" role="alert">
                Товары не найдены.
            </div>
        }
    </div>

    @if (showOrderModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Создание заказа</h5>
                        <button type="button" class="btn-close" @onclick="CancelOrder"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Количество</label>
                            <input type="number"
                                   @bind="orderQuantity"
                                   min="1"
                                   max="@selectedProduct.StockQuantity"
                                   class="form-control" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelOrder">
                            Отмена
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="ConfirmOrder">
                            Подтвердить заказ
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<ProductDto> products = new();
    private List<ProductDto> filteredProducts = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private bool showOrderModal = false;
    private ProductDto selectedProduct = null;
    private int orderQuantity = 1;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterProducts();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ProductService.GetAllProductsAsync();
            filteredProducts = products;
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterProducts()
    {
        filteredProducts = products
            .Where(p => string.IsNullOrWhiteSpace(searchTerm) ||
                   p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void AddToCart(ProductDto product)
    {
        // TODO: Implement cart functionality
        Console.WriteLine($"Added {product.Name} to cart");
    }

    private void CreateOrder(ProductDto product)
    {
        selectedProduct = product;
        orderQuantity = 1;
        showOrderModal = true;
    }

    private async Task ConfirmOrder()
    {
        if (selectedProduct == null || orderQuantity <= 0)
        {
            return;
        }

        try
        {
            // TODO: Replace with actual user ID retrieval
            var userId = Guid.Parse(JwtTokenService.ReadToken());


            var orderDto = new OrderDto
                {
                    CustomerId = userId,
                    ProductId = selectedProduct.Id,
                    Quantity = orderQuantity,
                    OrderDate = DateTime.UtcNow
                };
                var order = OrderEntity.Create(userId, selectedProduct.Id, orderQuantity, selectedProduct.Price);
                order.Id = Guid.NewGuid();
            await OrderRepository.AddAsync(order);

            // Update local product stock
            var productToUpdate = products.FirstOrDefault(p => p.Id == selectedProduct.Id);
            if (productToUpdate != null)
            {
                productToUpdate.StockQuantity -= orderQuantity;
            }

            // Refresh filtered products
            FilterProducts();

            // Close modal and reset
            showOrderModal = false;
            selectedProduct = null;
            orderQuantity = 1;
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error creating order: {ex.Message}");
        }
    }

    private void CancelOrder()
    {
        showOrderModal = false;
        selectedProduct = null;
        orderQuantity = 1;
    }
}