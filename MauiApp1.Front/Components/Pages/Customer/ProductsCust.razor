@page "/prodcust"
@using AutoMapper
@using MauiApp1.DbApp.Models
@using MauiApp1.DbApp.Models.Dtos
@using MauiApp1.Front.Services.Entity
@using MauiApp1.Front.Services.Jwt
@layout CustomerLayout
@inject IMapper Mapper
@inject ProductService ProductService
@inject IOrderRepository OrderRepository
@inject IJwtTokenService JwtTokenService

<div class="container mx-auto px-4 py-8">
    <div class="bg-white shadow-md rounded-lg overflow-hidden">
        <div class="bg-gray-100 px-6 py-4 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-2xl font-bold text-gray-800">Our Products</h3>
            <div class="flex items-center space-x-4">
                <input type="text"
                @bind="SearchTerm"
                @bind:event="oninput"
                placeholder="Search products..."
                class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center items-center py-8">
                <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-blue-500"></div>
            </div>
        }
        else if (filteredProducts.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
                @foreach (var product in filteredProducts)
                {
                    <div class="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300">
                        <div class="p-5">
                            <h5 class="mb-2 text-xl font-semibold tracking-tight text-gray-900">
                                @product.Name
                            </h5>
                            <div class="flex justify-between items-center mt-4">
                                <span class="text-2xl font-bold text-blue-600">
                                    @product.Price.ToString("C")
                                </span>
                                <span class="text-sm text-gray-500">
                                    Stock: @product.StockQuantity
                                </span>
                            </div>
                            <div class="flex space-x-2 mt-4">
                                <button @onclick="() => AddToCart(product)"
                                class="flex-1 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors duration-300
                                               disabled:opacity-50 disabled:cursor-not-allowed"
                                disabled="@(product.StockQuantity <= 0)">
                                    @(product.StockQuantity > 0 ? "Add to Cart" : "Out of Stock")
                                </button>
                                <button @onclick="() => CreateOrder(product)"
                                class="flex-1 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors duration-300
                                               disabled:opacity-50 disabled:cursor-not-allowed"
                                disabled="@(product.StockQuantity <= 0)">
                                    @(product.StockQuantity > 0 ? "Order Now" : "Out of Stock")
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8 text-gray-500">
                No products found.
            </div>
        }
    </div>

    @if (showOrderModal)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-96">
                <h4 class="text-xl font-semibold mb-4">Create Order</h4>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Quantity</label>
                    <input type="number"
                    @bind="orderQuantity"
                    min="1"
                    max="@selectedProduct.StockQuantity"
                    class="w-full px-3 py-2 border rounded-md" />
                </div>
                <div class="flex justify-between">
                    <button @onclick="ConfirmOrder"
                    class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                        Confirm Order
                    </button>
                    <button @onclick="CancelOrder"
                    class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<ProductDto> products = new();
    private List<ProductDto> filteredProducts = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private bool showOrderModal = false;
    private ProductDto selectedProduct = null;
    private int orderQuantity = 1;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterProducts();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ProductService.GetAllProductsAsync();
            filteredProducts = products;
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterProducts()
    {
        filteredProducts = products
            .Where(p => string.IsNullOrWhiteSpace(searchTerm) ||
                   p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void AddToCart(ProductDto product)
    {
        // TODO: Implement cart functionality
        Console.WriteLine($"Added {product.Name} to cart");
    }

    private void CreateOrder(ProductDto product)
    {
        selectedProduct = product;
        orderQuantity = 1;
        showOrderModal = true;
    }

    private async Task ConfirmOrder()
    {
        if (selectedProduct == null || orderQuantity <= 0)
        {
            return;
        }

        try
        {
            // TODO: Replace with actual user ID retrieval
            var userId = Guid.Parse(JwtTokenService.ReadToken());


            var orderDto = new OrderDto
                {
                    CustomerId = userId,
                    ProductId = selectedProduct.Id,
                    Quantity = orderQuantity,
                    OrderDate = DateTime.UtcNow
                };
                var order = OrderEntity.Create(userId, selectedProduct.Id, orderQuantity);

            await OrderRepository.AddAsync(order);

            // Update local product stock
            var productToUpdate = products.FirstOrDefault(p => p.Id == selectedProduct.Id);
            if (productToUpdate != null)
            {
                productToUpdate.StockQuantity -= orderQuantity;
            }

            // Refresh filtered products
            FilterProducts();

            // Close modal and reset
            showOrderModal = false;
            selectedProduct = null;
            orderQuantity = 1;
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error creating order: {ex.Message}");
        }
    }

    private void CancelOrder()
    {
        showOrderModal = false;
        selectedProduct = null;
        orderQuantity = 1;
    }
}