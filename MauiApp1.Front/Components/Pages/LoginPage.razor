@page "/login"
@using MauiApp1.DbApp.Models
@using MauiApp1.Front.Services
@using MauiApp1.Front.Services.Jwt
@using MauiApp1.Front.Services.Log
@layout SignLayout
@inject IUserRepository Repository
@inject IHashService Hasher
@inject IJwtTokenService JwtTokenService
@inject ILoggingService Logger
@inject NavigationManager NavigationManager

<div class="container-fluid vh-100 bg-primary d-flex align-items-center justify-content-center" style="background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);">
    <div class="col-12 col-md-6 col-lg-4">
        <div class="card shadow-lg border-0 rounded-4">
            <div class="card-body p-5">
                <div class="text-center mb-4">
                    <h2 class="card-title text-primary mb-3">Вход в систему</h2>
                    <p class="text-muted">Пожалуйста, введите ваши данные</p>
                </div>
                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">Имя пользователя</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-person"></i></span>
                            <InputText @bind-Value="loginModel.Username" class="form-control" placeholder="Введите имя пользователя" />
                        </div>
                        <ValidationMessage For="@(() => loginModel.Username)" class="text-danger small mt-1" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Пароль</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-lock"></i></span>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Введите пароль" />
                        </div>
                        <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small mt-1" />
                    </div>
                    <div class="d-grid mb-3">
                        <button type="submit" class="btn btn-primary btn-lg">
                            Войти
                        </button>
                    </div>
                    <div class="text-center">
                        <span class="text-muted">Нет аккаунта? </span>
                        <button @onclick="HandleToRegister" class="btn btn-link p-0">
                            Зарегистрироваться
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();

    private class LoginModel
    {
        [Required(ErrorMessage = "Имя пользователя обязательно")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Пароль обязателен")]
        [MinLength(6, ErrorMessage = "Пароль должен быть не короче 6 символов")]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        var user = await Repository.GetByUsernameAsync(loginModel.Username);

        if (user == null)
        {
            // Обработка случая, когда пользователь не найден
            return;
        }

        if (Hasher.HashPassword(loginModel.Password) == user.PasswordHash)
        {
            var token = user.Id.ToString();
            JwtTokenService.SaveToken(token);

            if (user.Role == "Customer")
            {
                Logger.LogInfo($"Клиент {user.Username} совершил вход");
                NavigationManager.NavigateTo("homecust");
            }
            else
            {
                Logger.LogInfo($"Сотрудник {user.Username} совершил вход");
                NavigationManager.NavigateTo("homeempl");
            }
        }
        else
        {
            // Обработка неверного пароля
        }
    }

    private void HandleToRegister()
    {
        NavigationManager.NavigateTo("register");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await Repository.GetByIdAsync(Guid.Parse(JwtTokenService.ReadToken())) ?? null;
            if (user != null)
            {
                if (user.Role == "Customer") NavigationManager.NavigateTo("homecust");
                else NavigationManager.NavigateTo("homeempl");
            }
        }
        catch
        {
            // Обработка ошибок при чтении токена
        }
    }
}