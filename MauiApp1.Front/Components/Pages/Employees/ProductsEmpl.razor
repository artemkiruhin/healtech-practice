@page "/prodempl"
@using AutoMapper
@using MauiApp1.DbApp.Models
@using MauiApp1.DbApp.Models.Dtos
@layout EmployeeLayout
@inject IProductRepository ProductRepository
@inject IMapper Mapper

<div class="container">
    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Товары</h3>
            <button @onclick="PrepareNewProduct" class="btn btn-success">
                Добавить новый товар
            </button>
        </div>

        <div class="card-body">
            <div class="row">
                <!-- Product List -->
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header">
                            <input type="text"
                                   @bind="SearchTerm"
                                   @bind:event="oninput"
                                   placeholder="Поиск..."
                                   class="form-control" />
                        </div>

                        @if (isLoading)
                        {
                            <div class="d-flex justify-content-center align-items-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Загрузка...</span>
                                </div>
                            </div>
                        }
                        else if (filteredProducts.Any())
                        {
                            <ul class="list-group list-group-flush">
                                @foreach (var product in filteredProducts)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <div class="fw-bold">@product.Name</div>
                                            <small class="text-muted">
                                                Цена: @product.Price.ToString("C") | Stock: @product.StockQuantity
                                            </small>
                                        </div>
                                        <div>
                                            <button @onclick="() => EditProduct(product)" class="btn btn-sm btn-outline-primary me-2">
                                                Изменить
                                            </button>
                                            <button @onclick="() => DeleteProduct(product)" class="btn btn-sm btn-outline-danger">
                                                Удалить
                                            </button>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <div class="card-body text-center text-muted">
                                Товары не найдены.
                            </div>
                        }
                    </div>
                </div>

                <!-- Product Form -->
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="mb-0">
                                @(currentProduct.Id == Guid.Empty ? "Добавление" : "Изменение")
                            </h4>
                        </div>
                        <div class="card-body">
                            <EditForm Model="@currentProduct" OnValidSubmit="@SaveProduct">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="alert alert-danger" />

                                <div class="mb-3">
                                    <label class="form-label">Название</label>
                                    <InputText @bind-Value="currentProduct.Name" class="form-control" />
                                    <ValidationMessage For="@(() => currentProduct.Name)" class="text-danger small" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Цена</label>
                                    <InputNumber @bind-Value="currentProduct.Price" class="form-control" />
                                    <ValidationMessage For="@(() => currentProduct.Price)" class="text-danger small" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Количество</label>
                                    <InputNumber @bind-Value="currentProduct.StockQuantity" class="form-control" />
                                    <ValidationMessage For="@(() => currentProduct.StockQuantity)" class="text-danger small" />
                                </div>

                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                    <button type="submit" class="btn btn-primary me-md-2">
                                        @(currentProduct.Id == Guid.Empty ? "Добавить" : "Изменить")
                                    </button>
                                    <button type="button" @onclick="CancelEdit" class="btn btn-secondary">
                                        Отмена
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ProductDto> products = new();
    private List<ProductDto> filteredProducts = new();
    private ProductDto currentProduct = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterProducts();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var productEntities = await ProductRepository.GetAllAsync();
            products = Mapper.Map<List<ProductDto>>(productEntities);
            filteredProducts = products;
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterProducts()
    {
        filteredProducts = products
            .Where(p => string.IsNullOrWhiteSpace(searchTerm) ||
                   p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void PrepareNewProduct()
    {
        currentProduct = new ProductDto();
    }

    private void EditProduct(ProductDto product)
    {
        currentProduct = new ProductDto
            {
                Id = product.Id,
                Name = product.Name,
                Price = product.Price,
                StockQuantity = product.StockQuantity
            };
    }

    private async Task SaveProduct()
    {
        try
        {
            if (currentProduct.Id == Guid.Empty)
            {
                // Add new product
                var productEntity = Mapper.Map<ProductEntity>(currentProduct);
                await ProductRepository.AddAsync(productEntity);
                products.Add(Mapper.Map<ProductDto>(productEntity));
            }
            else
            {
                // Update existing product
                var productEntity = Mapper.Map<ProductEntity>(currentProduct);
                await ProductRepository.UpdateAsync(productEntity);

                var existingProduct = products.FindIndex(p => p.Id == currentProduct.Id);
                if (existingProduct != -1)
                {
                    products[existingProduct] = currentProduct;
                }
            }

            FilterProducts();
            CancelEdit();
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error saving product: {ex.Message}");
        }
    }

    private async Task DeleteProduct(ProductDto product)
    {
        try
        {
            await ProductRepository.DeleteAsync(product.Id);
            products.Remove(product);
            FilterProducts();
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        currentProduct = new ProductDto();
    }
}