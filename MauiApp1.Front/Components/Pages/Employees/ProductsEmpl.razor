@page "/prodempl"
@using AutoMapper
@using MauiApp1.DbApp.Models
@using MauiApp1.DbApp.Models.Dtos
@layout EmployeeLayout
@inject IProductRepository ProductRepository
@inject IMapper Mapper

<div class="container mx-auto px-4 py-8">
    <div class="bg-white shadow-md rounded-lg">
        <div class="bg-gray-100 px-6 py-4 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-2xl font-bold text-gray-800">Product Management</h3>
            <button @onclick="PrepareNewProduct"
                    class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors">
                Add New Product
            </button>
        </div>

        <div class="grid md:grid-cols-2 gap-6 p-6">
            <!-- Product List -->
            <div class="bg-white border border-gray-200 rounded-lg">
                <div class="p-4 border-b">
                    <input type="text"
                           @bind="SearchTerm"
                           @bind:event="oninput"
                           placeholder="Search products..."
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>

                @if (isLoading)
                {
                    <div class="flex justify-center items-center py-8">
                        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-blue-500"></div>
                    </div>
                }
                else if (filteredProducts.Any())
                {
                    <div class="divide-y divide-gray-200">
                        @foreach (var product in filteredProducts)
                        {
                            <div class="p-4 hover:bg-gray-50 flex justify-between items-center">
                                <div>
                                    <div class="font-semibold">@product.Name</div>
                                    <div class="text-sm text-gray-500">
                                        Price: @product.Price.ToString("C") | Stock: @product.StockQuantity
                                    </div>
                                </div>
                                <div class="flex space-x-2">
                                    <button @onclick="() => EditProduct(product)"
                                            class="text-blue-500 hover:text-blue-700">
                                        Edit
                                    </button>
                                    <button @onclick="() => DeleteProduct(product)"
                                            class="text-red-500 hover:text-red-700">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-8 text-gray-500">
                        No products found.
                    </div>
                }
            </div>

            <!-- Product Form -->
            <div class="bg-white border border-gray-200 rounded-lg p-6">
                <h4 class="text-xl font-semibold mb-6">
                    @(currentProduct.Id == Guid.Empty ? "Add New Product" : "Edit Product")
                </h4>

                <EditForm Model="@currentProduct" OnValidSubmit="@SaveProduct">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-500 mb-4" />

                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Product Name</label>
                            <InputText @bind-Value="currentProduct.Name"
                                       class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                            <ValidationMessage For="@(() => currentProduct.Name)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Price</label>
                            <InputNumber @bind-Value="currentProduct.Price"
                                         class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                            <ValidationMessage For="@(() => currentProduct.Price)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Stock Quantity</label>
                            <InputNumber @bind-Value="currentProduct.StockQuantity"
                                         class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                            <ValidationMessage For="@(() => currentProduct.StockQuantity)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div class="flex space-x-4">
                            <button type="submit"
                                    class="w-full px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                                @(currentProduct.Id == Guid.Empty ? "Add Product" : "Update Product")
                            </button>
                            <button type="button"
                                    @onclick="CancelEdit"
                                    class="w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">
                                Cancel
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ProductDto> products = new();
    private List<ProductDto> filteredProducts = new();
    private ProductDto currentProduct = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterProducts();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var productEntities = await ProductRepository.GetAllAsync();
            products = Mapper.Map<List<ProductDto>>(productEntities);
            filteredProducts = products;
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterProducts()
    {
        filteredProducts = products
            .Where(p => string.IsNullOrWhiteSpace(searchTerm) ||
                   p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void PrepareNewProduct()
    {
        currentProduct = new ProductDto();
    }

    private void EditProduct(ProductDto product)
    {
        currentProduct = new ProductDto
            {
                Id = product.Id,
                Name = product.Name,
                Price = product.Price,
                StockQuantity = product.StockQuantity
            };
    }

    private async Task SaveProduct()
    {
        try
        {
            if (currentProduct.Id == Guid.Empty)
            {
                // Add new product
                var productEntity = Mapper.Map<ProductEntity>(currentProduct);
                await ProductRepository.AddAsync(productEntity);
                products.Add(Mapper.Map<ProductDto>(productEntity));
            }
            else
            {
                // Update existing product
                var productEntity = Mapper.Map<ProductEntity>(currentProduct);
                await ProductRepository.UpdateAsync(productEntity);

                var existingProduct = products.FindIndex(p => p.Id == currentProduct.Id);
                if (existingProduct != -1)
                {
                    products[existingProduct] = currentProduct;
                }
            }

            FilterProducts();
            CancelEdit();
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error saving product: {ex.Message}");
        }
    }

    private async Task DeleteProduct(ProductDto product)
    {
        try
        {
            await ProductRepository.DeleteAsync(product.Id);
            products.Remove(product);
            FilterProducts();
        }
        catch (Exception ex)
        {
            // TODO: Implement proper error handling
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        currentProduct = new ProductDto();
    }
}